//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicArtDownloader.Data.Fanart.Generated {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (music)
    /// </para>
    /// </summary>
    public partial class FanartType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FanartType(XElement xe) { return XTypedServices.ToXTypedElement<FanartType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FanartType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("music", "MusicArtDownloader.Data.Fanart.Generated")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (music)
        /// </para>
        /// </summary>
        public FanartType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (music)
        /// </para>
        /// </summary>
        public Music music {
            get {
                XElement x = this.GetElement(XName.Get("music", "MusicArtDownloader.Data.Fanart.Generated"));
                return ((Music)(x));
            }
            set {
                this.SetElement(XName.Get("music", "MusicArtDownloader.Data.Fanart.Generated"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Fanart", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FanartType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("music", "MusicArtDownloader.Data.Fanart.Generated"), typeof(Music));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (artistbackgrounds?, albums, artistthumbs?, musiclogos?, hdmusiclogos?, musicbanners?)
    /// </para>
    /// </summary>
    public partial class Music : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Music(XElement xe) { return XTypedServices.ToXTypedElement<Music>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Music() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (artistbackgrounds?, albums, artistthumbs?, musiclogos?, hdmusiclogos?, musicbanners?)
        /// </para>
        /// </summary>
        public Music() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (artistbackgrounds?, albums, artistthumbs?, musiclogos?, hdmusiclogos?, musicbanners?)
        /// </para>
        /// </summary>
        public ArtistBackgrounds artistbackgrounds {
            get {
                XElement x = this.GetElement(XName.Get("artistbackgrounds", "MusicArtDownloader.Data.Fanart.Generated"));
                return ((ArtistBackgrounds)(x));
            }
            set {
                this.SetElement(XName.Get("artistbackgrounds", "MusicArtDownloader.Data.Fanart.Generated"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (artistbackgrounds?, albums, artistthumbs?, musiclogos?, hdmusiclogos?, musicbanners?)
        /// </para>
        /// </summary>
        public Albums albums {
            get {
                XElement x = this.GetElement(XName.Get("albums", "MusicArtDownloader.Data.Fanart.Generated"));
                return ((Albums)(x));
            }
            set {
                this.SetElement(XName.Get("albums", "MusicArtDownloader.Data.Fanart.Generated"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (artistbackgrounds?, albums, artistthumbs?, musiclogos?, hdmusiclogos?, musicbanners?)
        /// </para>
        /// </summary>
        public ArtistThumbs artistthumbs {
            get {
                XElement x = this.GetElement(XName.Get("artistthumbs", "MusicArtDownloader.Data.Fanart.Generated"));
                return ((ArtistThumbs)(x));
            }
            set {
                this.SetElement(XName.Get("artistthumbs", "MusicArtDownloader.Data.Fanart.Generated"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (artistbackgrounds?, albums, artistthumbs?, musiclogos?, hdmusiclogos?, musicbanners?)
        /// </para>
        /// </summary>
        public MusicLogos musiclogos {
            get {
                XElement x = this.GetElement(XName.Get("musiclogos", "MusicArtDownloader.Data.Fanart.Generated"));
                return ((MusicLogos)(x));
            }
            set {
                this.SetElement(XName.Get("musiclogos", "MusicArtDownloader.Data.Fanart.Generated"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (artistbackgrounds?, albums, artistthumbs?, musiclogos?, hdmusiclogos?, musicbanners?)
        /// </para>
        /// </summary>
        public HDMusicLogos hdmusiclogos {
            get {
                XElement x = this.GetElement(XName.Get("hdmusiclogos", "MusicArtDownloader.Data.Fanart.Generated"));
                return ((HDMusicLogos)(x));
            }
            set {
                this.SetElement(XName.Get("hdmusiclogos", "MusicArtDownloader.Data.Fanart.Generated"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (artistbackgrounds?, albums, artistthumbs?, musiclogos?, hdmusiclogos?, musicbanners?)
        /// </para>
        /// </summary>
        public MusicBanners musicbanners {
            get {
                XElement x = this.GetElement(XName.Get("musicbanners", "MusicArtDownloader.Data.Fanart.Generated"));
                return ((MusicBanners)(x));
            }
            set {
                this.SetElement(XName.Get("musicbanners", "MusicArtDownloader.Data.Fanart.Generated"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Music", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Music>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("artistbackgrounds", "MusicArtDownloader.Data.Fanart.Generated"), typeof(ArtistBackgrounds));
            localElementDictionary.Add(XName.Get("albums", "MusicArtDownloader.Data.Fanart.Generated"), typeof(Albums));
            localElementDictionary.Add(XName.Get("artistthumbs", "MusicArtDownloader.Data.Fanart.Generated"), typeof(ArtistThumbs));
            localElementDictionary.Add(XName.Get("musiclogos", "MusicArtDownloader.Data.Fanart.Generated"), typeof(MusicLogos));
            localElementDictionary.Add(XName.Get("hdmusiclogos", "MusicArtDownloader.Data.Fanart.Generated"), typeof(HDMusicLogos));
            localElementDictionary.Add(XName.Get("musicbanners", "MusicArtDownloader.Data.Fanart.Generated"), typeof(MusicBanners));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (artistbackground*)
    /// </para>
    /// </summary>
    public partial class ArtistBackgrounds : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<artistbackgroundLocalType> artistbackgroundField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ArtistBackgrounds(XElement xe) { return XTypedServices.ToXTypedElement<ArtistBackgrounds>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ArtistBackgrounds() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("artistbackground", "MusicArtDownloader.Data.Fanart.Generated")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (artistbackground*)
        /// </para>
        /// </summary>
        public ArtistBackgrounds() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (artistbackground*)
        /// </para>
        /// </summary>
        public IList<MusicArtDownloader.Data.Fanart.Generated.ArtistBackgrounds.artistbackgroundLocalType> artistbackground {
            get {
                if ((this.artistbackgroundField == null)) {
                    this.artistbackgroundField = new XTypedList<artistbackgroundLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("artistbackground", "MusicArtDownloader.Data.Fanart.Generated"));
                }
                return this.artistbackgroundField;
            }
            set {
                if ((value == null)) {
                    this.artistbackgroundField = null;
                }
                else {
                    if ((this.artistbackgroundField == null)) {
                        this.artistbackgroundField = XTypedList<artistbackgroundLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("artistbackground", "MusicArtDownloader.Data.Fanart.Generated"));
                    }
                    else {
                        XTypedServices.SetList<artistbackgroundLocalType>(this.artistbackgroundField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ArtistBackgrounds", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArtistBackgrounds>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("artistbackground", "MusicArtDownloader.Data.Fanart.Generated"), typeof(artistbackgroundLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class artistbackgroundLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator artistbackgroundLocalType(XElement xe) { return XTypedServices.ToXTypedElement<artistbackgroundLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public artistbackgroundLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.Uri url {
                get {
                    XAttribute x = this.Attribute(XName.Get("url", ""));
                    return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int likes {
                get {
                    XAttribute x = this.Attribute(XName.Get("likes", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("likes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("artistbackground", "MusicArtDownloader.Data.Fanart.Generated");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<artistbackgroundLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (album*)
    /// </para>
    /// </summary>
    public partial class Albums : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Album> albumField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Albums(XElement xe) { return XTypedServices.ToXTypedElement<Albums>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Albums() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("album", "MusicArtDownloader.Data.Fanart.Generated")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (album*)
        /// </para>
        /// </summary>
        public Albums() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (album*)
        /// </para>
        /// </summary>
        public IList<Album> album {
            get {
                if ((this.albumField == null)) {
                    this.albumField = new XTypedList<Album>(this, LinqToXsdTypeManager.Instance, XName.Get("album", "MusicArtDownloader.Data.Fanart.Generated"));
                }
                return this.albumField;
            }
            set {
                if ((value == null)) {
                    this.albumField = null;
                }
                else {
                    if ((this.albumField == null)) {
                        this.albumField = XTypedList<Album>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("album", "MusicArtDownloader.Data.Fanart.Generated"));
                    }
                    else {
                        XTypedServices.SetList<Album>(this.albumField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Albums", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Albums>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("album", "MusicArtDownloader.Data.Fanart.Generated"), typeof(Album));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (cdart*, albumcover*)
    /// </para>
    /// </summary>
    public partial class Album : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cdartLocalType> cdartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<albumcoverLocalType> albumcoverField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Album(XElement xe) { return XTypedServices.ToXTypedElement<Album>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Album() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("cdart", "MusicArtDownloader.Data.Fanart.Generated")), new NamedContentModelEntity(XName.Get("albumcover", "MusicArtDownloader.Data.Fanart.Generated")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cdart*, albumcover*)
        /// </para>
        /// </summary>
        public Album() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cdart*, albumcover*)
        /// </para>
        /// </summary>
        public IList<MusicArtDownloader.Data.Fanart.Generated.Album.cdartLocalType> cdart {
            get {
                if ((this.cdartField == null)) {
                    this.cdartField = new XTypedList<cdartLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("cdart", "MusicArtDownloader.Data.Fanart.Generated"));
                }
                return this.cdartField;
            }
            set {
                if ((value == null)) {
                    this.cdartField = null;
                }
                else {
                    if ((this.cdartField == null)) {
                        this.cdartField = XTypedList<cdartLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("cdart", "MusicArtDownloader.Data.Fanart.Generated"));
                    }
                    else {
                        XTypedServices.SetList<cdartLocalType>(this.cdartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cdart*, albumcover*)
        /// </para>
        /// </summary>
        public IList<MusicArtDownloader.Data.Fanart.Generated.Album.albumcoverLocalType> albumcover {
            get {
                if ((this.albumcoverField == null)) {
                    this.albumcoverField = new XTypedList<albumcoverLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("albumcover", "MusicArtDownloader.Data.Fanart.Generated"));
                }
                return this.albumcoverField;
            }
            set {
                if ((value == null)) {
                    this.albumcoverField = null;
                }
                else {
                    if ((this.albumcoverField == null)) {
                        this.albumcoverField = XTypedList<albumcoverLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("albumcover", "MusicArtDownloader.Data.Fanart.Generated"));
                    }
                    else {
                        XTypedServices.SetList<albumcoverLocalType>(this.albumcoverField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Album", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Album>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("cdart", "MusicArtDownloader.Data.Fanart.Generated"), typeof(cdartLocalType));
            localElementDictionary.Add(XName.Get("albumcover", "MusicArtDownloader.Data.Fanart.Generated"), typeof(albumcoverLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class cdartLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator cdartLocalType(XElement xe) { return XTypedServices.ToXTypedElement<cdartLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public cdartLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.Uri url {
                get {
                    XAttribute x = this.Attribute(XName.Get("url", ""));
                    return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int likes {
                get {
                    XAttribute x = this.Attribute(XName.Get("likes", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("likes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int disc {
                get {
                    XAttribute x = this.Attribute(XName.Get("disc", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("disc", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int size {
                get {
                    XAttribute x = this.Attribute(XName.Get("size", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("cdart", "MusicArtDownloader.Data.Fanart.Generated");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<cdartLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class albumcoverLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator albumcoverLocalType(XElement xe) { return XTypedServices.ToXTypedElement<albumcoverLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public albumcoverLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.Uri url {
                get {
                    XAttribute x = this.Attribute(XName.Get("url", ""));
                    return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int likes {
                get {
                    XAttribute x = this.Attribute(XName.Get("likes", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("likes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("albumcover", "MusicArtDownloader.Data.Fanart.Generated");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<albumcoverLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (artistthumb*)
    /// </para>
    /// </summary>
    public partial class ArtistThumbs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<artistthumbLocalType> artistthumbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ArtistThumbs(XElement xe) { return XTypedServices.ToXTypedElement<ArtistThumbs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ArtistThumbs() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("artistthumb", "MusicArtDownloader.Data.Fanart.Generated")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (artistthumb*)
        /// </para>
        /// </summary>
        public ArtistThumbs() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (artistthumb*)
        /// </para>
        /// </summary>
        public IList<MusicArtDownloader.Data.Fanart.Generated.ArtistThumbs.artistthumbLocalType> artistthumb {
            get {
                if ((this.artistthumbField == null)) {
                    this.artistthumbField = new XTypedList<artistthumbLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("artistthumb", "MusicArtDownloader.Data.Fanart.Generated"));
                }
                return this.artistthumbField;
            }
            set {
                if ((value == null)) {
                    this.artistthumbField = null;
                }
                else {
                    if ((this.artistthumbField == null)) {
                        this.artistthumbField = XTypedList<artistthumbLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("artistthumb", "MusicArtDownloader.Data.Fanart.Generated"));
                    }
                    else {
                        XTypedServices.SetList<artistthumbLocalType>(this.artistthumbField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ArtistThumbs", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArtistThumbs>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("artistthumb", "MusicArtDownloader.Data.Fanart.Generated"), typeof(artistthumbLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class artistthumbLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator artistthumbLocalType(XElement xe) { return XTypedServices.ToXTypedElement<artistthumbLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public artistthumbLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.Uri url {
                get {
                    XAttribute x = this.Attribute(XName.Get("url", ""));
                    return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int likes {
                get {
                    XAttribute x = this.Attribute(XName.Get("likes", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("likes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("artistthumb", "MusicArtDownloader.Data.Fanart.Generated");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<artistthumbLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (musiclogo*)
    /// </para>
    /// </summary>
    public partial class MusicLogos : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<musiclogoLocalType> musiclogoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MusicLogos(XElement xe) { return XTypedServices.ToXTypedElement<MusicLogos>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MusicLogos() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("musiclogo", "MusicArtDownloader.Data.Fanart.Generated")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (musiclogo*)
        /// </para>
        /// </summary>
        public MusicLogos() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (musiclogo*)
        /// </para>
        /// </summary>
        public IList<MusicArtDownloader.Data.Fanart.Generated.MusicLogos.musiclogoLocalType> musiclogo {
            get {
                if ((this.musiclogoField == null)) {
                    this.musiclogoField = new XTypedList<musiclogoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("musiclogo", "MusicArtDownloader.Data.Fanart.Generated"));
                }
                return this.musiclogoField;
            }
            set {
                if ((value == null)) {
                    this.musiclogoField = null;
                }
                else {
                    if ((this.musiclogoField == null)) {
                        this.musiclogoField = XTypedList<musiclogoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("musiclogo", "MusicArtDownloader.Data.Fanart.Generated"));
                    }
                    else {
                        XTypedServices.SetList<musiclogoLocalType>(this.musiclogoField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MusicLogos", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MusicLogos>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("musiclogo", "MusicArtDownloader.Data.Fanart.Generated"), typeof(musiclogoLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class musiclogoLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator musiclogoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<musiclogoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public musiclogoLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.Uri url {
                get {
                    XAttribute x = this.Attribute(XName.Get("url", ""));
                    return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int likes {
                get {
                    XAttribute x = this.Attribute(XName.Get("likes", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("likes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("musiclogo", "MusicArtDownloader.Data.Fanart.Generated");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<musiclogoLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (hdmusiclogo*)
    /// </para>
    /// </summary>
    public partial class HDMusicLogos : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<hdmusiclogoLocalType> hdmusiclogoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator HDMusicLogos(XElement xe) { return XTypedServices.ToXTypedElement<HDMusicLogos>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HDMusicLogos() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("hdmusiclogo", "MusicArtDownloader.Data.Fanart.Generated")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (hdmusiclogo*)
        /// </para>
        /// </summary>
        public HDMusicLogos() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (hdmusiclogo*)
        /// </para>
        /// </summary>
        public IList<MusicArtDownloader.Data.Fanart.Generated.HDMusicLogos.hdmusiclogoLocalType> hdmusiclogo {
            get {
                if ((this.hdmusiclogoField == null)) {
                    this.hdmusiclogoField = new XTypedList<hdmusiclogoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("hdmusiclogo", "MusicArtDownloader.Data.Fanart.Generated"));
                }
                return this.hdmusiclogoField;
            }
            set {
                if ((value == null)) {
                    this.hdmusiclogoField = null;
                }
                else {
                    if ((this.hdmusiclogoField == null)) {
                        this.hdmusiclogoField = XTypedList<hdmusiclogoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hdmusiclogo", "MusicArtDownloader.Data.Fanart.Generated"));
                    }
                    else {
                        XTypedServices.SetList<hdmusiclogoLocalType>(this.hdmusiclogoField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HDMusicLogos", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HDMusicLogos>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("hdmusiclogo", "MusicArtDownloader.Data.Fanart.Generated"), typeof(hdmusiclogoLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class hdmusiclogoLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator hdmusiclogoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<hdmusiclogoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public hdmusiclogoLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.Uri url {
                get {
                    XAttribute x = this.Attribute(XName.Get("url", ""));
                    return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int likes {
                get {
                    XAttribute x = this.Attribute(XName.Get("likes", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("likes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("hdmusiclogo", "MusicArtDownloader.Data.Fanart.Generated");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<hdmusiclogoLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (musicbanner*)
    /// </para>
    /// </summary>
    public partial class MusicBanners : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<musicbannerLocalType> musicbannerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MusicBanners(XElement xe) { return XTypedServices.ToXTypedElement<MusicBanners>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MusicBanners() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("musicbanner", "MusicArtDownloader.Data.Fanart.Generated")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (musicbanner*)
        /// </para>
        /// </summary>
        public MusicBanners() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (musicbanner*)
        /// </para>
        /// </summary>
        public IList<MusicArtDownloader.Data.Fanart.Generated.MusicBanners.musicbannerLocalType> musicbanner {
            get {
                if ((this.musicbannerField == null)) {
                    this.musicbannerField = new XTypedList<musicbannerLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("musicbanner", "MusicArtDownloader.Data.Fanart.Generated"));
                }
                return this.musicbannerField;
            }
            set {
                if ((value == null)) {
                    this.musicbannerField = null;
                }
                else {
                    if ((this.musicbannerField == null)) {
                        this.musicbannerField = XTypedList<musicbannerLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("musicbanner", "MusicArtDownloader.Data.Fanart.Generated"));
                    }
                    else {
                        XTypedServices.SetList<musicbannerLocalType>(this.musicbannerField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MusicBanners", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MusicBanners>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("musicbanner", "MusicArtDownloader.Data.Fanart.Generated"), typeof(musicbannerLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class musicbannerLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator musicbannerLocalType(XElement xe) { return XTypedServices.ToXTypedElement<musicbannerLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public musicbannerLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.Uri url {
                get {
                    XAttribute x = this.Attribute(XName.Get("url", ""));
                    return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public int likes {
                get {
                    XAttribute x = this.Attribute(XName.Get("likes", ""));
                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("likes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("musicbanner", "MusicArtDownloader.Data.Fanart.Generated");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<musicbannerLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    public partial class fanart : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FanartType ContentField;
        
         public static explicit operator fanart(XElement xe) { return XTypedServices.ToXTypedElement<fanart, FanartType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public fanart() {
            SetInnerType(new FanartType());
        }
        
        public fanart(FanartType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public FanartType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (music)
        /// </para>
        /// </summary>
        public Music music {
            get {
                return this.ContentField.music;
            }
            set {
                this.ContentField.music = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("fanart", "MusicArtDownloader.Data.Fanart.Generated");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static fanart Load(string xmlFile) {
            return XTypedServices.Load<fanart, FanartType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static fanart Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<fanart, FanartType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static fanart Parse(string xml) {
            return XTypedServices.Parse<fanart, FanartType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new fanart(((FanartType)(this.Content.Clone())));
        }
        
        private void SetInnerType(FanartType ContentField) {
            this.ContentField = ((FanartType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("Fanart", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.FanartType));
            typeDictionary.Add(XName.Get("Music", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.Music));
            typeDictionary.Add(XName.Get("ArtistBackgrounds", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.ArtistBackgrounds));
            typeDictionary.Add(XName.Get("Albums", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.Albums));
            typeDictionary.Add(XName.Get("Album", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.Album));
            typeDictionary.Add(XName.Get("ArtistThumbs", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.ArtistThumbs));
            typeDictionary.Add(XName.Get("MusicLogos", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.MusicLogos));
            typeDictionary.Add(XName.Get("HDMusicLogos", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.HDMusicLogos));
            typeDictionary.Add(XName.Get("MusicBanners", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.MusicBanners));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("fanart", "MusicArtDownloader.Data.Fanart.Generated"), typeof(global::MusicArtDownloader.Data.Fanart.Generated.fanart));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(MusicArtDownloader.Data.Fanart.Generated.fanart), typeof(global::MusicArtDownloader.Data.Fanart.Generated.FanartType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("fanart", "MusicArtDownloader.Data.Fanart.Generated")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public fanart fanart {  get {return rootObject as fanart; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(fanart root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::MusicArtDownloader.Data.Fanart.Generated.fanart fanart {  get {return rootObject as global::MusicArtDownloader.Data.Fanart.Generated.fanart; } }
        
        private XRoot() {
        }
        
        public XRoot(global::MusicArtDownloader.Data.Fanart.Generated.fanart root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
